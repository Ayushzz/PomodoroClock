{"version":3,"sources":["ui/BreakSessionUi.js","components/Break.jsx","components/Session.jsx","components/TimeLeft.jsx","App.js","serviceWorker.js","index.js"],"names":["BreakSessionContainer","children","props","className","BreakSessionLabel","BreakSessionTime","PlusMinusButtonContainer","PlusMinusButton","Break","breakLength","decrementBreakLengthByOneMinute","incrementBreakLengthByOneMinute","breakLengthInMinutes","Moment","duration","minutes","id","onClick","Session","sessionLength","decrementSessionLengthByOneMinute","incrementSessionLengthByOneMinute","sessionLengthInMinutes","momentDurationFormatSetup","moment","TimeLeft","handleResetButtonClick","timerLabel","handleStartStopClick","startStopButtonLabel","timeLeft","formattedTimeLeft","format","trim","App","audioElement","useRef","useState","currentSessionType","setCurrentSessionType","intervalId","setIntervalId","setSessionLength","setBreakLength","setTimeLeft","useEffect","current","play","isStarted","newBreakLength","load","clearInterval","newIntervalId","setInterval","x","newSessionLength","ref","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAEaA,EAAwB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAaC,EAAY,4BAC/D,OACE,uCAAKC,UAAU,8BAAiCD,GAC7CD,IAKMG,EAAoB,SAAC,GAA2B,IAAzBH,EAAwB,EAAxBA,SAAaC,EAAW,4BAC1D,OACE,qCAAGC,UAAU,0BAA6BD,GACxCD,IAKOI,EAAmB,SAAC,GAA2B,IAAzBJ,EAAwB,EAAxBA,SAAaC,EAAW,4BACzD,OACE,qCAAGC,UAAU,iCAAoCD,GAC/CD,IAKOK,EAA2B,SAAC,GAA2B,IAAzBL,EAAwB,EAAxBA,SAAaC,EAAW,4BACjE,OAAO,uCAAKC,UAAU,oCAAuCD,GAC5DD,IAIUM,EAAkB,SAAC,GAA2B,IAAzBN,EAAwB,EAAxBA,SAAaC,EAAW,4BACxD,OACE,0CAAQC,UAAU,qDAAwDD,GACxED,IChBSO,EAfD,SAAC,GAAmF,IAAlFC,EAAiF,EAAjFA,YAAYC,EAAqE,EAArEA,gCAAgCC,EAAqC,EAArCA,gCAEtDC,EAAuBC,IAAOC,SAASL,EAAa,KAAKM,UAC/D,OACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAmBC,GAAG,eAAtB,SACA,kBAAC,EAAD,CAAkBA,GAAG,gBAAgBJ,GACrC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAiBI,GAAG,kBAAkBC,QAASP,GAA/C,KACA,kBAAC,EAAD,CAAiBM,GAAG,kBAAkBC,QAASN,GAA/C,QCOWO,EAhBC,SAAChB,GAAW,IACjBiB,EAAqFjB,EAArFiB,cAAeC,EAAsElB,EAAtEkB,kCAAmCC,EAAmCnB,EAAnCmB,kCAEnDC,EAAyBT,IAAOC,SAASK,EAAe,KAAKJ,UACvE,OACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAmBC,GAAG,iBAAtB,WACA,kBAAC,EAAD,CAAkBA,GAAG,kBAAkBM,GACvC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAiBN,GAAG,oBAAoBC,QAASG,GAAjD,KACA,kBAAC,EAAD,CAAiBJ,GAAG,oBAAoBC,QAASI,GAAjD,Q,aCVJE,GAA0BC,KAE1B,IAsBeC,EAtBE,SAAC,GAA2H,EAA1HhB,YAA2H,IAA9GiB,EAA6G,EAA7GA,uBAAuCC,GAAsE,EAArFR,cAAqF,EAAtEQ,YAAYC,EAA0D,EAA1DA,qBAAsBC,EAAoC,EAApCA,qBAAsBC,EAAc,EAAdA,SAEzHC,EAAoBP,IAAOV,SAASgB,EAAU,KAAKE,OAAO,QAAS,CAACC,MAAM,IAChF,OACI,yBAAK9B,UAAU,+EACX,uBAAGA,UAAU,wBAAwBa,GAAG,eAAeW,GACvD,uBAAGxB,UAAU,qBAAqBa,GAAG,aAAae,GAC1D,4BACC5B,UAAU,+DACVa,GAAG,aACHC,QAASW,GAAuBC,GAEjC,4BACC1B,UAAU,6EACVa,GAAG,QACHC,QAASS,GAHV,WCgGeQ,MA5Gf,WACE,IAAMC,EAAeC,iBAAO,MADf,EAEuCC,mBAAS,WAFhD,mBAENC,EAFM,KAEcC,EAFd,OAGwBF,mBAAS,MAHjC,mBAGNG,EAHM,KAGMC,EAHN,OAI6BJ,mBAAS,MAJtC,mBAINlB,EAJM,KAISuB,EAJT,OAKyBL,mBAAS,KALlC,mBAKN5B,EALM,KAKOkC,EALP,OAMmBN,mBAASlB,GAN5B,mBAMNW,EANM,KAMIc,EANJ,KAQbC,qBAAU,WACFD,EAAYzB,KACjB,CAACA,IAEJ0B,qBAAU,WACS,IAAbf,IACFK,EAAaW,QAAQC,OACK,YAAvBT,GACDC,EAAsB,SACtBK,EAAYnC,IACoB,UAAvB6B,IACTC,EAAsB,WACtBK,EAAYzB,OAGf,CAACV,EAAa6B,EAAoBnB,EAAeW,IAEtD,IA+BMkB,EAA2B,OAAfR,EA0BhB,OACE,yBAAKrC,UAAU,kEACf,yBAAKA,UAAU,8BACb,kBAAC,EAAD,CACAM,YAAaA,EACbC,gCA9DkC,WACpC,IAAMuC,EAAiBxC,EAAc,GAElCwC,EAAiB,GAChBN,EAAeM,IA2DjBtC,gCAvDkC,WACtC,IAAMsC,EAAiBxC,EAAc,GACjCwC,GAAkB,MAClBN,EAAeM,MAsDf,kBAAC,EAAD,CAAUtB,WAAYW,EACtBZ,uBApByB,WAE7BS,EAAaW,QAAQI,OACrBC,cAAcX,GACdC,EAAc,MACdF,EAAsB,WACtBG,EAAiB,MACjBC,EAAe,KACfC,EAAY,OAaPhB,qBAnCsB,WAC7B,GAAGoB,EAECG,cAAcX,GACdC,EAAc,UAET,CACD,IAAMW,EAAgBC,aAAY,WAC9BT,GAAY,SAAAU,GAAC,OAAIA,EAAI,OACrB,KACJb,EAAcW,KA0BfvB,qBAAsBmB,EAAY,OAAS,QAC3ClB,SAAUA,IACX,kBAAC,EAAD,CACAX,cAAeA,EACfC,kCAxDoC,WACtC,IAAMmC,EAAmBpC,EAAgB,GAEtCoC,EAAmB,GAClBb,EAAiBa,IAqDnBlC,kCAjDoC,WACxC,IAAMkC,EAAmBpC,EAAgB,GACtCoC,GAAoB,MACrBb,EAAiBa,OAiDf,2BAAOvC,GAAG,OAAOwC,IAAKrB,GACtB,4BAAQsB,IAAI,oDAAoDC,KAAK,kBChGvDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c1314b0b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const BreakSessionContainer = ({ children, ...props }) => {\r\n  return (\r\n    <div className=\"flex flex-col items-center\" {...props}>\r\n      {children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport const BreakSessionLabel = ({ children, ...props}) => {\r\n  return (\r\n    <p className=\"text-lg text-green-200\" {...props}>\r\n     {children}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport const BreakSessionTime = ({ children, ...props}) => {\r\n  return (\r\n    <p className=\"text-4xl font-bold text-white\" {...props}>\r\n     {children}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport const PlusMinusButtonContainer = ({ children, ...props}) => {\r\n  return <div className=\"grid grid-flow-col gap-2 rounded\" {...props}>\r\n  {children}\r\n  </div>;\r\n};\r\n\r\nexport const PlusMinusButton = ({ children, ...props}) => {\r\n  return (\r\n    <button className=\"mt-2 text-lg text-gray-800 px-4 py-2 bg-green-200\" {...props}>\r\n     {children}\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport Moment from 'moment';\r\nimport {BreakSessionContainer, BreakSessionLabel, BreakSessionTime, PlusMinusButtonContainer, PlusMinusButton} from '../ui/BreakSessionUi';\r\n\r\nconst Break = ({breakLength,decrementBreakLengthByOneMinute,incrementBreakLengthByOneMinute}) => {\r\n\r\nconst breakLengthInMinutes = Moment.duration(breakLength, 's').minutes();\r\nreturn (\r\n    <BreakSessionContainer>\r\n    <BreakSessionLabel id=\"break-label\">Break</BreakSessionLabel>\r\n    <BreakSessionTime id=\"break-length\">{breakLengthInMinutes}</BreakSessionTime>\r\n    <PlusMinusButtonContainer>\r\n    <PlusMinusButton id=\"break-decrement\" onClick={decrementBreakLengthByOneMinute}>-</PlusMinusButton>\r\n    <PlusMinusButton id=\"break-increment\" onClick={incrementBreakLengthByOneMinute}>+</PlusMinusButton>\r\n    </PlusMinusButtonContainer>\r\n    </BreakSessionContainer>\r\n);\r\n};\r\n\r\nexport default Break;\r\n","import React from 'react';\r\nimport Moment from 'moment';\r\nimport {BreakSessionContainer, BreakSessionLabel,BreakSessionTime, PlusMinusButtonContainer, PlusMinusButton} from '../ui/BreakSessionUi';\r\n\r\nconst Session = (props) => {\r\n    const {sessionLength, decrementSessionLengthByOneMinute, incrementSessionLengthByOneMinute}=props;\r\n\r\n    const sessionLengthInMinutes = Moment.duration(sessionLength, 's').minutes();\r\nreturn (\r\n    <BreakSessionContainer>\r\n    <BreakSessionLabel id=\"session-label\">Session</BreakSessionLabel>\r\n    <BreakSessionTime id=\"session-length\">{sessionLengthInMinutes}</BreakSessionTime>\r\n    <PlusMinusButtonContainer>\r\n    <PlusMinusButton id=\"session-decrement\" onClick={decrementSessionLengthByOneMinute}>-</PlusMinusButton>\r\n    <PlusMinusButton id=\"session-increment\" onClick={incrementSessionLengthByOneMinute}>+</PlusMinusButton>\r\n    </PlusMinusButtonContainer>\r\n    </BreakSessionContainer>\r\n    );\r\n};\r\n\r\nexport default Session;\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport momentDurationFormatSetup from 'moment-duration-format';\r\n\r\nmomentDurationFormatSetup(moment);\r\n\r\nconst TimeLeft = ({breakLength, handleResetButtonClick, sessionLength, timerLabel, handleStartStopClick, startStopButtonLabel, timeLeft}) => {\r\n\r\nconst formattedTimeLeft = moment.duration(timeLeft, 's').format(\"mm:ss\", {trim: false})\r\nreturn (\r\n    <div className=\"flex flex-col justify-evenly items-center w-64 h-64 bg-red-600 rounded-full\">\r\n        <p className=\"text-red-900 text-2xl\" id=\"timer-label\">{timerLabel}</p>\r\n        <p className=\"text-4xl font-bold\" id=\"time-left\">{formattedTimeLeft}</p>\r\n<button\r\n className=\"text-red-400 font-semibold bg-green-900 px-4 py-2 rounded-lg\"\r\n id=\"start_stop\"\r\n onClick={handleStartStopClick}>{startStopButtonLabel}\r\n</button>\r\n<button\r\n className=\"border-2 text-green-900 rounded-lg border-green-900 border-solid px-2 py-2\"\r\n id=\"reset\"\r\n onClick={handleResetButtonClick}>\r\nReset\r\n</button>\r\n</div>\r\n);\r\n};\r\n\r\nexport default TimeLeft;\r\n","import React,{ useState, useEffect, useRef } from 'react';\nimport './assets/main.css';\nimport Break from './components/Break';\nimport Session from './components/Session';\nimport TimeLeft from './components/TimeLeft';\n\nfunction App() {\n  const audioElement = useRef(null);\n  const [currentSessionType, setCurrentSessionType] = useState('Session');\n  const [intervalId, setIntervalId ] = useState(null)\n  const [sessionLength, setSessionLength] = useState(1500);\n  const [breakLength, setBreakLength] = useState(300);\n  const [timeLeft, setTimeLeft] = useState(sessionLength);\n\n  useEffect(() => {\n          setTimeLeft(sessionLength);\n  }, [sessionLength]);\n\n  useEffect(() => {\n    if (timeLeft === 0) {\n      audioElement.current.play();\n      if(currentSessionType === 'Session') {\n        setCurrentSessionType('Break');\n        setTimeLeft(breakLength);\n      } else if (currentSessionType === 'Break') {\n        setCurrentSessionType('Session');\n        setTimeLeft(sessionLength);\n      }\n    }\n  }, [breakLength, currentSessionType, sessionLength, timeLeft]);\n\nconst decrementBreakLengthByOneMinute = () => {\n    const newBreakLength = breakLength - 60;\n\n    if(newBreakLength > 0) {\n        setBreakLength(newBreakLength);\n    }\n};\n\nconst incrementBreakLengthByOneMinute = () => {\n  const newBreakLength = breakLength + 60;\n  if (newBreakLength <= 60*60) {\n      setBreakLength(newBreakLength);\n  }\n};\n\n\nconst decrementSessionLengthByOneMinute = () => {\n    const newSessionLength = sessionLength - 60;\n\n    if(newSessionLength > 0) {\n        setSessionLength(newSessionLength);\n    }\n};\n\nconst incrementSessionLengthByOneMinute = () => {\n  const newSessionLength = sessionLength + 60;\n  if(newSessionLength <= 60*60) {\n    setSessionLength(newSessionLength);\n  }\n};\n\nconst isStarted = intervalId !== null;\nconst handleStartStopClick = () => {\nif(isStarted) {\n\n    clearInterval(intervalId);\n    setIntervalId(null);\n}\n    else {\n        const newIntervalId = setInterval(() => {\n            setTimeLeft(x => x - 1);\n         }, 1000);\n        setIntervalId(newIntervalId);\n    }\n};\n\nconst handleResetButtonClick = () => {\n  // reset audio\n  audioElement.current.load()\n  clearInterval(intervalId)\n  setIntervalId(null)\n  setCurrentSessionType('Session')\n  setSessionLength(60 * 25)\n  setBreakLength(60 * 5)\n  setTimeLeft(60 * 25)\n}\n\n  return (\n    <div className=\"flex flex-col h-screen items-center justify-center bg-blue-600\">\n    <div className=\"flex w-full justify-around\">\n      <Break\n      breakLength={breakLength}\n      decrementBreakLengthByOneMinute={decrementBreakLengthByOneMinute}\n      incrementBreakLengthByOneMinute={incrementBreakLengthByOneMinute}\n      />\n      <TimeLeft timerLabel={currentSessionType}\n      handleResetButtonClick={handleResetButtonClick}\n       handleStartStopClick={handleStartStopClick}\n       startStopButtonLabel={isStarted ? 'Stop' : 'Start'}\n       timeLeft={timeLeft}/>\n      <Session\n      sessionLength={sessionLength}\n      decrementSessionLengthByOneMinute={decrementSessionLengthByOneMinute}\n      incrementSessionLengthByOneMinute={incrementSessionLengthByOneMinute}\n      />\n    </div>\n      <audio id=\"beep\" ref={audioElement}>\n      <source src=\"https://www.soundjay.com/clock/alarm-clock-01.mp3\" type=\"audio/mpeg\" />\n      </audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}